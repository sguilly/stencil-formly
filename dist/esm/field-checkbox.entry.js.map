{"file":"field-checkbox.entry.js","mappings":";;AAAA,MAAM,gBAAgB,GAAG,yNAAyN;;MCMrO,aAAa;;;;;2BAEO,EAAE;;EAMjC,WAAW;IACT,QACE,WAAK,KAAK,EAAC,yBAAyB,IACjC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI;MACpC,QACE,WAAK,KAAK,EAAC,uBAAuB,IAChC,aACE,KAAK,EAAC,mBAAmB,EACzB,IAAI,EAAC,UAAU,EACf,OAAO,EAAE,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,GAAG,KAAK,EACzE,OAAO,EAAE,CAAC,EAAO;UACf,IAAI,IAAI,CAAC,eAAe,CAAC,QAAQ,IAAI,IAAI,EAAE;YACzC,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;YAErD,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;YACnD,IAAI,EAAE,CAAC,MAAM,CAAC,OAAO,IAAI,IAAI,EAAE;cAC7B,IAAI,KAAK,GAAG,CAAC,EAAE;gBACb,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;eACxB;aACF;iBAAM;cACL,IAAI,KAAK,EAAE;gBACT,IAAI,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,MAAM,KAAI,CAAC,EAAE;kBACtB,KAAK,GAAG,IAAI,CAAC;iBACd;qBAAM;kBACL,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;iBACxB;eACF;aACF;YAED,IAAI,CAAC,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;WAC/C;eAAM;YACL,IAAI,EAAE,CAAC,MAAM,CAAC,OAAO,IAAI,IAAI,EAAE;cAC7B,IAAI,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAC3B;iBAAM;cACL,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;aACnB;WACF;UACD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;SAC/C,GACM,EACT,eAAM,IAAI,CAAC,KAAK,CAAO,CACnB,EACN;KACH,CAAC,CACE,EACN;GACH;EAED,MAAM,mBAAmB;;IACvB,IAAI,CAAC,eAAe,GAAG,CAAA,MAAA,IAAI,CAAC,eAAe,0CAAE,QAAQ,KAAI,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;GAC9E;EAED,MAAM;IACJ,QACE,uBAAiB,eAAe,EAAE,IAAI,CAAC,eAAe,EAAE,eAAe,EAAE,IAAI,CAAC,eAAe,IAC1F,IAAI,CAAC,WAAW,EAAE,CACH,EAClB;GACH;;;;;;","names":[],"sources":["./src/components/dynamic-form/fields/field-checkbox.css?tag=field-checkbox","./src/components/dynamic-form/fields/field-checkbox.tsx"],"sourcesContent":[".df-checkboxes-container {\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: row;\n}\n\n.df-checkbox-container {\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: row;\n  align-items: center;\n}\n\n.df-checkbox-input {\n  margin-left: 10px;\n  margin-right: 10px;\n}\n","import { Component, h, State, Prop, Event, EventEmitter } from '@stencil/core';\n\n@Component({\n  tag: 'field-checkbox',\n  styleUrl: 'field-checkbox.css',\n})\nexport class FieldCheckbox {\n  @Prop() value: any;\n  @Prop() templateOptions: any = {};\n\n  @Event() customChange: EventEmitter<any>;\n\n  displayRequired;\n\n  renderInput() {\n    return (\n      <div class=\"df-checkboxes-container\">\n        {this.templateOptions.options.map(item => {\n          return (\n            <div class=\"df-checkbox-container\">\n              <input\n                class=\"df-checkbox-input\"\n                type=\"checkbox\"\n                checked={this.value && this.value.indexOf(item.value) >= 0 ? true : false}\n                onInput={(ev: any) => {\n                  if (this.templateOptions.multiple == true) {\n                    let value = this.value ? Array.from(this.value) : [];\n\n                    let index = value ? value.indexOf(item.value) : -1;\n                    if (ev.target.checked == true) {\n                      if (index < 0) {\n                        value.push(item.value);\n                      }\n                    } else {\n                      if (value) {\n                        if (value?.length == 1) {\n                          value = null;\n                        } else {\n                          value.splice(index, 1);\n                        }\n                      }\n                    }\n\n                    this.value = value ? Array.from(value) : null;\n                  } else {\n                    if (ev.target.checked == true) {\n                      this.value = [item.value];\n                    } else {\n                      this.value = null;\n                    }\n                  }\n                  this.customChange.emit({ value: this.value });\n                }}\n              ></input>\n              <div>{item.label}</div>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  async componentWillRender() {\n    this.displayRequired = this.templateOptions?.required == true && !this.value;\n  }\n\n  render() {\n    return (\n      <field-container templateOptions={this.templateOptions} displayRequired={this.displayRequired}>\n        {this.renderInput()}\n      </field-container>\n    );\n  }\n}\n"],"version":3}