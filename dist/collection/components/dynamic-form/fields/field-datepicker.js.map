{"version":3,"file":"field-datepicker.js","sourceRoot":"","sources":["../../../../src/components/dynamic-form/fields/field-datepicker.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAgB,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAC/F,OAAO,EAAE,aAAa,EAAE,MAAM,uBAAuB,CAAC;AACtD,OAAO,EAAc,OAAO,EAAE,UAAU,EAAgB,MAAM,2BAA2B,CAAC;AAU1F,MAAM,OAAO,wBAAwB;;;oBAEhB,KAAK;2BACO,EAAE;;;EAgBjC,eAAe,CAAC,QAAiB,EAAE,SAAkB;IACnD,OAAO,CAAC,GAAG,CAAC,uBAAuB,EAAE,QAAQ,CAAC,CAAC;IAE/C,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;EAClC,CAAC;EAED,iBAAiB;IACf,IAAI,QAAQ,GAAG,EAAE,CAAC;IAElB,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,+DAA+D,CAAC,CAAC,CAAC;IAExF,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,wCAAwC,CAAC,CAAC,CAAC;IAEpE,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,wDAAwD,CAAC,CAAC,CAAC;IAEpF,OAAO,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;EAC/B,CAAC;EAED,gBAAgB;IACd,IAAI,IAAI,GAAG,IAAI,CAAC;IAEhB,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,iBAAiB,EAAE;MAChD,MAAM,EAAE,IAAI;MACZ,UAAU,EAAE,IAAI;MAChB,WAAW,EAAE,OAAO;MACpB,UAAU,EAAE,OAAO;MACnB,QAAQ,EAAE,UAAU,aAAa,EAAE,OAAO,EAAE,SAAS;QACnD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QAEvB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;MAC7D,CAAC;KACF,CAAC,CAAC;IAEH,IAAI,IAAI,CAAC,KAAK,EAAE;MACd,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;MACrC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACnC;EACH,CAAC;EAED,WAAW;;IACT,OAAO,CAAC,aAAO,KAAK,EAAE,CAAC,CAAA,MAAA,MAAA,MAAA,IAAI,CAAC,UAAU,0CAAE,KAAK,0CAAE,OAAO,0CAAE,SAAS,KAAI,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAC,MAAM,EAAC,WAAW,EAAC,eAAe,EAAC,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,GAAG,EAAiB,CAAC,GAAU,CAAC,CAAC;EACjP,CAAC;EAED,KAAK,CAAC,mBAAmB;;IACvB,IAAI,CAAC,UAAU,GAAG,aAAa,EAAE,CAAA;IACjC,IAAI,CAAC,eAAe,GAAG,CAAA,MAAA,IAAI,CAAC,eAAe,0CAAE,QAAQ,KAAI,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;EAC/E,CAAC;EAED,MAAM;IACJ,OAAO,CACL,uBAAiB,eAAe,EAAE,IAAI,CAAC,eAAe,EAAE,eAAe,EAAE,IAAI,CAAC,eAAe,IAC1F,IAAI,CAAC,WAAW,EAAE,CACH,CACnB,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Event, EventEmitter, Element, State, h, Prop, Watch } from '@stencil/core';\nimport { getClassNames } from '../../../styles/style';\nimport { loadScript, loadCss, loadModule, loadNoModule } from '../../../utils/loadScript';\n\ndeclare var flatpickr: any;\ndeclare var French: any;\n\n@Component({\n  tag: 'field-datepicker',\n  styleUrl: 'field-datepicker.css',\n  shadow: false,\n})\nexport class FieldDatepickerComponent {\n  @Prop() value: any;\n  @Prop() disabled = false;\n  @Prop() templateOptions: any = {};\n\n  @Event() customChange: EventEmitter<any>;\n\n  @Element() el: HTMLElement;\n\n  datePickerElement;\n\n  calendar;\n\n  displayRequired;\n  classNames\n\n  @State() dateStr;\n\n  @Watch('value')\n  calendarHandler(newValue: boolean, _oldValue: boolean) {\n    console.log('New value for value: ', newValue);\n\n    this.calendar.setDate(newValue);\n  }\n\n  componentWillLoad() {\n    let promises = [];\n\n    promises.push(loadCss('https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css'));\n\n    promises.push(loadModule('https://cdn.jsdelivr.net/npm/flatpickr'));\n\n    promises.push(loadModule('https://cdn.jsdelivr.net/npm/flatpickr/dist/l10n/fr.js'));\n\n    return Promise.all(promises);\n  }\n\n  componentDidLoad() {\n    let that = this;\n\n    this.calendar = flatpickr(this.datePickerElement, {\n      locale: 'fr',\n      allowInput: true,\n      defaultDate: 'today',\n      dateFormat: 'd-m-Y',\n      onChange: function (selectedDates, dateStr, _instance) {\n        that.dateStr = dateStr;\n\n        that.customChange.emit({ value: new Date(selectedDates) });\n      },\n    });\n\n    if (this.value) {\n      console.log('set value', this.value);\n      this.calendar.setDate(this.value);\n    }\n  }\n\n  renderInput() {\n    return [<input class={(this.classNames?.group?.control?.className || '') + (this.displayRequired == true ? ' df-is-required' : '')} type=\"text\" placeholder=\"Select Date..\" ref={el => (this.datePickerElement = el as HTMLElement)}></input>];\n  }\n\n  async componentWillRender() {\n    this.classNames = getClassNames()\n    this.displayRequired = this.templateOptions?.required == true && !this.value;\n  }\n\n  render() {\n    return (\n      <field-container templateOptions={this.templateOptions} displayRequired={this.displayRequired}>\n        {this.renderInput()}\n      </field-container>\n    );\n  }\n}\n"]}