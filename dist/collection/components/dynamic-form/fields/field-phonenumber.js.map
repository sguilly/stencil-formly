{"version":3,"file":"field-phonenumber.js","sourceRoot":"","sources":["../../../../src/components/dynamic-form/fields/field-phonenumber.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,CAAC,EAAS,IAAI,EAAE,KAAK,EAAgB,MAAM,eAAe,CAAC;AAE/E,OAAO,EAAE,UAAU,EAAE,OAAO,EAA4B,MAAM,2BAA2B,CAAC;AAQ1F,MAAM,OAAO,UAAU;;;oBAEF,KAAK;2BACO,EAAE;;EASjC,KAAK,CAAC,iBAAiB;IACrB,IAAI,QAAQ,GAAG,EAAE,CAAC;IAElB,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,oFAAoF,CAAC,CAAC,CAAC;IAE7G,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,sFAAsF,CAAC,CAAC,CAAC;IAElH,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,+EAA+E,CAAC,CAAC,CAAC;IAE3G,OAAO,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;EAC/B,CAAC;EAED,kBAAkB;IAChB,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IAClC,IAAI,CAAC,QAAQ,GAAG,YAAY,CAAC,IAAI,CAAC,QAAQ,EAAE;MAC1C,cAAc,EAAE,IAAI;KACrB,CAAC,CAAC;IAEH,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,eAAe,EAAE;MAC9C,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;EACL,CAAC;EAED,WAAW;;IACT,OAAO;MACL,aACE,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,GAAG,EAAiB,CAAC,EAC9C,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,KAAK,EAAE,QAAQ,GAAG,CAAC,CAAA,MAAA,IAAI,CAAC,eAAe,0CAAE,QAAQ,KAAI,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,CAAC,EAClG,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,OAAO,EAAE,CAAC,EAAO,EAAE,EAAE;UACnB,OAAO,CAAC,GAAG,CAAC,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC,CAAC;UAExD,IAAI,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,EAAE;YACjC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC;YACvC,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;cACzB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;aAC/C;WACF;QACH,CAAC,GACM;MACT,cACE,KAAK,EAAC,QAAQ,EACd,OAAO,EAAE,GAAG,EAAE;UACZ,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;UAClB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;QAChD,CAAC,QAGM;KACV,CAAC;EACJ,CAAC;EAED,KAAK,CAAC,mBAAmB;;IACvB,IAAI,CAAC,eAAe,GAAG,CAAA,MAAA,IAAI,CAAC,eAAe,0CAAE,QAAQ,KAAI,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;EAC/E,CAAC;EAED,MAAM;IACJ,OAAO,CACL,uBAAiB,eAAe,EAAE,IAAI,CAAC,eAAe,EAAE,eAAe,EAAE,IAAI,CAAC,eAAe,IAC1F,IAAI,CAAC,WAAW,EAAE,CACH,CACnB,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, h, State, Prop, Event, EventEmitter } from '@stencil/core';\n\nimport { loadScript, loadCss, loadModule, loadNoModule } from '../../../utils/loadScript';\n\ndeclare var intlTelInput: any;\ndeclare var intlTelInputUtils: any;\n\n@Component({\n  tag: 'field-phonenumber',\n})\nexport class FieldInput {\n  @Prop() value: any;\n  @Prop() disabled = false;\n  @Prop() templateOptions: any = {};\n\n  @Event() customChange: EventEmitter<any>;\n\n  refInput;\n  instance;\n\n  displayRequired;\n\n  async componentWillLoad() {\n    let promises = [];\n\n    promises.push(loadCss('https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.16/css/intlTelInput.css'));\n\n    promises.push(loadScript('https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.16/js/intlTelInput.min.js'));\n\n    promises.push(loadScript('https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.16/js/utils.min.js'));\n\n    return Promise.all(promises);\n  }\n\n  componentDidRender() {\n    console.log('ref', this.refInput);\n    this.instance = intlTelInput(this.refInput, {\n      initialCountry: 'fr',\n    });\n\n    this.refInput.addEventListener('countrychange', function () {\n      console.log('countrychange');\n    });\n  }\n\n  renderInput() {\n    return [\n      <input\n        ref={el => (this.refInput = el as HTMLElement)}\n        disabled={this.disabled}\n        class={'input ' + (this.templateOptions?.required == true && !this.value ? ' df-is-required' : '')}\n        value={this.value}\n        onInput={(ev: any) => {\n          console.log('valid ? ' + this.instance.isValidNumber());\n\n          if (this.instance.isValidNumber()) {\n            this.value = this.instance.getNumber();\n            if (this.value.length > 0) {\n              this.customChange.emit({ value: this.value });\n            }\n          }\n        }}\n      ></input>,\n      <button\n        class=\"button\"\n        onClick={() => {\n          this.value = null;\n          this.customChange.emit({ value: this.value });\n        }}\n      >\n        X\n      </button>,\n    ];\n  }\n\n  async componentWillRender() {\n    this.displayRequired = this.templateOptions?.required == true && !this.value;\n  }\n\n  render() {\n    return (\n      <field-container templateOptions={this.templateOptions} displayRequired={this.displayRequired}>\n        {this.renderInput()}\n      </field-container>\n    );\n  }\n}\n"]}