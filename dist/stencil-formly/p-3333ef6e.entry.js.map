{"version":3,"names":["fieldTimepickerCss","FieldTimepickerComponent","calendarHandler","newValue","_oldValue","console","log","this","calendar","setDate","componentWillLoad","promises","push","loadCss","loadModule","Promise","all","componentDidLoad","that","flatpickr","datePickerElement","locale","allowInput","enableTime","noCalendar","dateFormat","time_24hr","defaultDate","onChange","selectedDates","dateStr","_instance","customChange","emit","value","Date","renderInput","h","class","type","placeholder","ref","el","async","displayRequired","_a","templateOptions","required","render"],"sources":["./src/components/dynamic-form/fields/field-timepicker.css?tag=field-timepicker","./src/components/dynamic-form/fields/field-timepicker.tsx"],"sourcesContent":["custom-timepicker input {\n  width: 100px !important;\n}\n","import { Component, Event, EventEmitter, Element, State, h, Prop, Watch } from '@stencil/core';\n\nimport { loadScript, loadCss, loadModule, loadNoModule } from '../../../utils/loadScript';\n\ndeclare var flatpickr: any;\ndeclare var French: any;\n\n@Component({\n  tag: 'field-timepicker',\n  styleUrl: 'field-timepicker.css',\n  shadow: false,\n})\nexport class FieldTimepickerComponent {\n  @Prop() value: any;\n  @Prop() disabled = false;\n  @Prop() templateOptions: any = {};\n\n  @Event() customChange: EventEmitter<any>;\n\n  @Element() el: HTMLElement;\n\n  datePickerElement;\n\n  calendar;\n  displayRequired;\n\n  @State() dateStr;\n\n  @Watch('value')\n  calendarHandler(newValue: boolean, _oldValue: boolean) {\n    console.log('New value for value: ', newValue);\n\n    this.calendar.setDate(newValue);\n  }\n\n  componentWillLoad() {\n    let promises = [];\n\n    promises.push(loadCss('https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css'));\n\n    promises.push(loadModule('https://cdn.jsdelivr.net/npm/flatpickr'));\n\n    promises.push(loadModule('https://cdn.jsdelivr.net/npm/flatpickr/dist/l10n/fr.js'));\n\n    return Promise.all(promises);\n  }\n\n  componentDidLoad() {\n    let that = this;\n\n    this.calendar = flatpickr(this.datePickerElement, {\n      locale: 'fr',\n      allowInput: true,\n      enableTime: true,\n      noCalendar: true,\n      dateFormat: 'H:i',\n      time_24hr: true,\n      defaultDate: '12:00',\n      onChange: function (selectedDates, dateStr, _instance) {\n        that.dateStr = dateStr;\n\n        console.log(selectedDates, dateStr);\n\n        that.customChange.emit({ value: new Date(selectedDates) });\n      },\n    });\n\n    if (this.value) {\n      console.log('set value', this.value);\n      this.calendar.setDate(this.value);\n    }\n  }\n\n  renderInput() {\n    return [<input class=\"input\" type=\"text\" placeholder=\"Select Time..\" ref={el => (this.datePickerElement = el as HTMLElement)}></input>];\n  }\n\n  async componentWillRender() {\n    this.displayRequired = this.templateOptions?.required == true && !this.value;\n  }\n\n  render() {\n    return (\n      <field-container templateOptions={this.templateOptions} displayRequired={this.displayRequired}>\n        {this.renderInput()}\n      </field-container>\n    );\n  }\n}\n"],"mappings":"oGAAA,MAAMA,EAAqB,kD,MCYdC,EAAwB,M,uGAEhB,M,qBACY,G,uBAc/BC,gBAAgBC,EAAmBC,GACjCC,QAAQC,IAAI,wBAAyBH,GAErCI,KAAKC,SAASC,QAAQN,E,CAGxBO,oBACE,IAAIC,EAAW,GAEfA,EAASC,KAAKC,EAAQ,kEAEtBF,EAASC,KAAKE,EAAW,2CAEzBH,EAASC,KAAKE,EAAW,2DAEzB,OAAOC,QAAQC,IAAIL,E,CAGrBM,mBACE,IAAIC,EAAOX,KAEXA,KAAKC,SAAWW,UAAUZ,KAAKa,kBAAmB,CAChDC,OAAQ,KACRC,WAAY,KACZC,WAAY,KACZC,WAAY,KACZC,WAAY,MACZC,UAAW,KACXC,YAAa,QACbC,SAAU,SAAUC,EAAeC,EAASC,GAC1Cb,EAAKY,QAAUA,EAEfzB,QAAQC,IAAIuB,EAAeC,GAE3BZ,EAAKc,aAAaC,KAAK,CAAEC,MAAO,IAAIC,KAAKN,I,IAI7C,GAAItB,KAAK2B,MAAO,CACd7B,QAAQC,IAAI,YAAaC,KAAK2B,OAC9B3B,KAAKC,SAASC,QAAQF,KAAK2B,M,EAI/BE,cACE,MAAO,CAACC,EAAA,SAAOC,MAAM,QAAQC,KAAK,OAAOC,YAAY,gBAAgBC,IAAKC,GAAOnC,KAAKa,kBAAoBsB,I,CAG5GC,4B,MACEpC,KAAKqC,kBAAkBC,EAAAtC,KAAKuC,mBAAe,MAAAD,SAAA,SAAAA,EAAEE,WAAY,OAASxC,KAAK2B,K,CAGzEc,SACE,OACEX,EAAA,mBAAiBS,gBAAiBvC,KAAKuC,gBAAiBF,gBAAiBrC,KAAKqC,iBAC3ErC,KAAK6B,c"}